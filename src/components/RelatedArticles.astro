---
import { searchVectorDB } from '../utils/vectorSearch';
import FormattedDate from './FormattedDate.astro';

interface Props {
  currentArticle: {
    title: string;
    description?: string;
    url: string;
  };
  mode?: 'sidebar' | 'inline';
}

const { currentArticle, mode = 'sidebar' } = Astro.props;

// Get related articles based on the current article's content
const searchText = `${currentArticle.title} ${currentArticle.description || ''}`;
const results = await searchVectorDB(searchText, 6);

// Filter out the current article
const relatedArticles = results
  .filter(article => article.url !== currentArticle.url)
  .slice(0, 5);

// Split articles for different placements
const [inlineArticle, sidebarArticles, nextArticle] = [
  relatedArticles[0],
  relatedArticles.slice(1, 4),
  relatedArticles[4]
];
---

{/* Semantic markup for related content */}
{mode === 'sidebar' ? (
  <div class="related-content" role="complementary" aria-label="Related articles">
    <aside class="related-sidebar print:hidden" data-current-url={currentArticle.url}>
      <div class="sticky top-32 bg-gray-100 dark:bg-gray-800 rounded-lg p-3 border border-gray-200 dark:border-gray-700 shadow-lg">
        {nextArticle && (
          <div class="mb-3 pb-3 border-b border-gray-200 dark:border-gray-700">
            <p class="text-[10px] text-primary-500 font-medium mb-1.5 dark:text-primary-400">Up Next</p>
            <a href={nextArticle.url} class="group">
              <h3 class="text-xs font-medium text-gray-900 dark:text-gray-100 group-hover:text-primary-500 transition-colors">
                {nextArticle.title}
              </h3>
            </a>
          </div>
        )}

        <h3 class="text-[10px] uppercase tracking-wider font-medium text-gray-300 dark:text-gray-200 mb-3">Related Coverage</h3>
        <div class="space-y-3">
          {sidebarArticles.map(article => (
            <a href={article.url} class="block group">
              <article class="relative transition-colors">
                <div class="absolute -left-2 top-0 bottom-0 w-0.5 bg-gray-700 dark:bg-gray-600 group-hover:bg-primary-500 transition-colors"></div>
                <h4 class="text-[11px] font-medium text-gray-200 dark:text-gray-100 group-hover:text-primary-400 transition-colors mb-1">
                  {article.title}
                </h4>
                <FormattedDate date={new Date(article.date)} class="text-[9px] text-gray-400 dark:text-gray-400 group-hover:text-gray-300 transition-colors" />
              </article>
            </a>
          ))}
        </div>
      </div>
    </aside>
  </div>
) : (
  <div class="inline-article my-12 border-l-4 border-primary-500/20 pl-6 bg-gray-50 dark:bg-gray-900/50 rounded-r-lg shadow-md">
    {inlineArticle && (
      <div>
        <p class="text-sm font-medium mb-3 text-primary-500">Related Article</p>
        <a href={inlineArticle.url} class="block group">
          <article>
            <h3 class="text-base font-medium group-hover:text-primary-500 transition-colors mb-2">
              {inlineArticle.title}
            </h3>
            {inlineArticle.description && (
              <p class="text-sm text-gray-500 dark:text-gray-400 line-clamp-2 mb-3 group-hover:text-gray-400 dark:group-hover:text-gray-300 transition-colors">
                {inlineArticle.description}
              </p>
            )}
            <FormattedDate date={new Date(inlineArticle.date)} class="text-xs text-gray-400 dark:text-gray-500" />
          </article>
        </a>
      </div>
    )}
  </div>
)}

  {/* No-JS fallback and print version */}
  <noscript>
    <div class="space-y-8 print:space-y-4 xl:col-span-2">
      {relatedArticles.map(article => (
        <article class="border-t border-gray-200 dark:border-gray-800 print:border-gray-300 pt-6 print:pt-4">
          <a href={article.url} class="block">
            <h3 class="text-lg font-medium mb-2 print:text-black">{article.title}</h3>
            {article.description && (
              <p class="text-gray-500 dark:text-gray-400 print:text-gray-600 mb-3">{article.description}</p>
            )}
            <FormattedDate date={new Date(article.date)} class="text-sm text-gray-400 dark:text-gray-500 print:text-gray-600" />
          </a>
        </article>
      ))}
    </div>
  </noscript>
</div>

<script>
  // Initialize sidebar animation
  document.addEventListener('DOMContentLoaded', () => {
    const sidebar = document.querySelector('.related-sidebar');
    if (!sidebar) return;

    // Show sidebar after a short delay
    setTimeout(() => {
      sidebar.classList.add('translate-x-0');
    }, 300);
  });
</script>

<style>
  .related-sidebar {
    opacity: 0;
    transform: translateX(20px);
    transition: opacity 0.4s ease, transform 0.4s cubic-bezier(0.4, 0, 0.2, 1);
  }

  .related-sidebar.translate-x-0 {
    opacity: 1;
    transform: translateX(0);
  }

  @media print, (monochrome) {
    .related-sidebar {
      display: none !important;
    }
  }
</style>