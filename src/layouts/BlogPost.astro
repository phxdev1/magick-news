---
import type { CollectionEntry } from 'astro:content';
import BaseHead from '../components/BaseHead.astro';
import Header from '../components/Header.astro';
import Footer from '../components/Footer.astro';
import FormattedDate from '../components/FormattedDate.astro';

type Props = CollectionEntry<'blog'>['data'];

const { title, subtitle, description, publish_date, created_date, heroImage, read_time, author } = Astro.props;
---

<!doctype html>
<html lang="en">
	<head>
		<BaseHead title={title} description={description || subtitle || ''} />
		<style>
			main {
				width: 960px;
				max-width: calc(100% - 2em);
				margin: auto;
				padding: 3em 1em;
			}
			.hero-image {
				width: 100%;
			}
			.hero-image img {
				display: block;
				margin: 0 auto;
				border-radius: 12px;
				box-shadow: var(--box-shadow);
				max-height: 400px;
				object-fit: cover;
			}
			.title {
				margin-bottom: 0.5em;
				padding: 0;
				text-align: center;
				line-height: 1;
			}
			.subtitle {
				margin-bottom: 1em;
				padding: 0;
				text-align: center;
				font-size: 1.15em;
				color: rgb(var(--gray));
			}
			.date {
				margin-bottom: 0.5em;
				color: rgb(var(--gray));
			}
			.metadata {
				display: flex;
				flex-wrap: wrap;
				gap: 1rem;
				justify-content: center;
				align-items: center;
				margin: 1rem 0 2rem;
				color: rgb(var(--gray));
				font-size: 0.875rem;
			}
			.metadata span {
				display: flex;
				align-items: center;
				gap: 0.25rem;
			}
			.divider {
				color: rgb(var(--gray-light));
			}
			.last-updated-on {
				font-style: italic;
			}
			article {
				margin-top: 2em;
			}
		</style>
	</head>

	<body>
		<Header />
		<main>
			<article>
				<div class="hero-image">
					{heroImage && <img width={1020} height={510} src={heroImage} alt="" />}
				</div>
				<h1 class="title">{title}</h1>
				{subtitle && <p class="subtitle">{subtitle}</p>}
				<div class="metadata">
					<span>
						<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
							<rect x="3" y="4" width="18" height="18" rx="2" ry="2"></rect>
							<line x1="16" y1="2" x2="16" y2="6"></line>
							<line x1="8" y1="2" x2="8" y2="6"></line>
							<line x1="3" y1="10" x2="21" y2="10"></line>
						</svg>
						<FormattedDate date={publish_date} />
					</span>
					<span class="divider">•</span>
					<span>
						<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
							<circle cx="12" cy="12" r="10"></circle>
							<polyline points="12 6 12 12 16 14"></polyline>
						</svg>
						{read_time}
					</span>
					<span class="divider">•</span>
					<span>
						<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
							<path d="M20 21v-2a4 4 0 0 0-4-4H8a4 4 0 0 0-4 4v2"></path>
							<circle cx="12" cy="7" r="4"></circle>
						</svg>
						{author}
					</span>
				</div>
				<slot />
				{
					created_date.getTime() !== publish_date.getTime() && (
						<div class="last-updated-on">
							Last updated on <FormattedDate date={created_date} />
						</div>
					)
				}
			</article>
		</main>
		<Footer />
	</body>
</html>
