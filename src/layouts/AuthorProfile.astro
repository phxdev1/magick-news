---
import BaseHead from '../components/BaseHead.astro';
import Header from '../components/Header.astro';
import Footer from '../components/Footer.astro';
import type { Author } from '../content/authors/schema';
import { getCollection } from 'astro:content';

interface Props {
  author: Author;
}

const { author } = Astro.props;

// Get all posts by this author
const allPosts = await getCollection('news');
const authorPosts = allPosts.filter(post => post.data.author === author.name)
  .sort((a, b) => b.data.publish_date.valueOf() - a.data.publish_date.valueOf());
---

<!doctype html>
<html lang="en">
  <head>
    <BaseHead 
      title={`${author.name} - Author Profile`} 
      description={author.shortBio}
      image={author.avatar}
    />
  </head>
  <body>
    <Header />
    <main>
      <article class="max-w-6xl mx-auto px-4 py-12">
        <div class="flex flex-col lg:flex-row gap-12">
          <!-- Author Info -->
          <div class="lg:w-1/3">
            <div class="sticky top-8">
              <div class="aspect-square w-48 h-48 mx-auto lg:mx-0 rounded-2xl overflow-hidden bg-dark-50 border border-primary-500/20">
                <img 
                  src={author.avatar} 
                  alt={`${author.name}'s profile picture`}
                  class="w-full h-full object-cover"
                />
              </div>
              <h1 class="mt-6 text-3xl font-bold text-gray-100">{author.name}</h1>
              <p class="mt-2 text-xl text-primary-400">{author.role}</p>
              
              {author.social && (
                <div class="mt-4 flex gap-4">
                  {author.social.twitter && (
                    <a 
                      href={author.social.twitter}
                      target="_blank"
                      rel="noopener noreferrer"
                      class="text-gray-400 hover:text-primary-400 transition-colors"
                    >
                      <span class="sr-only">Twitter</span>
                      <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                        <path d="M22 4s-.7 2.1-2 3.4c1.6 10-9.4 17.3-18 11.6 2.2.1 4.4-.6 6-2C3 15.5.5 9.6 3 5c2.2 2.6 5.6 4.1 9 4-.9-4.2 4-6.6 7-3.8 1.1 0 3-1.2 3-1.2z"></path>
                      </svg>
                    </a>
                  )}
                  {author.social.linkedin && (
                    <a 
                      href={author.social.linkedin}
                      target="_blank"
                      rel="noopener noreferrer"
                      class="text-gray-400 hover:text-primary-400 transition-colors"
                    >
                      <span class="sr-only">LinkedIn</span>
                      <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                        <path d="M16 8a6 6 0 0 1 6 6v7h-4v-7a2 2 0 0 0-2-2 2 2 0 0 0-2 2v7h-4v-7a6 6 0 0 1 6-6z"></path>
                        <rect x="2" y="9" width="4" height="12"></rect>
                        <circle cx="4" cy="4" r="2"></circle>
                      </svg>
                    </a>
                  )}
                  {author.social.github && (
                    <a 
                      href={author.social.github}
                      target="_blank"
                      rel="noopener noreferrer"
                      class="text-gray-400 hover:text-primary-400 transition-colors"
                    >
                      <span class="sr-only">GitHub</span>
                      <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                        <path d="M9 19c-5 1.5-5-2.5-7-3m14 6v-3.87a3.37 3.37 0 0 0-.94-2.61c3.14-.35 6.44-1.54 6.44-7A5.44 5.44 0 0 0 20 4.77 5.07 5.07 0 0 0 19.91 1S18.73.65 16 2.48a13.38 13.38 0 0 0-7 0C6.27.65 5.09 1 5.09 1A5.07 5.07 0 0 0 5 4.77a5.44 5.44 0 0 0-1.5 3.78c0 5.42 3.3 6.61 6.44 7A3.37 3.37 0 0 0 9 18.13V22"></path>
                      </svg>
                    </a>
                  )}
                </div>
              )}

              <div class="mt-8">
                <h2 class="text-lg font-semibold text-gray-100">Location</h2>
                <p class="mt-1 text-gray-400">{author.location}</p>
              </div>

              <div class="mt-6">
                <h2 class="text-lg font-semibold text-gray-100">Languages</h2>
                <div class="mt-2 flex flex-wrap gap-2">
                  {author.languages.map(lang => (
                    <span class="px-3 py-1 text-sm rounded-full bg-primary-900/30 text-primary-300 border border-primary-500/10">
                      {lang}
                    </span>
                  ))}
                </div>
              </div>

              {author.expertise && (
                <div class="mt-6">
                  <h2 class="text-lg font-semibold text-gray-100">Expertise</h2>
                  <div class="mt-2 flex flex-wrap gap-2">
                    {author.expertise.map(skill => (
                      <span class="px-3 py-1 text-sm rounded-full bg-primary-900/30 text-primary-300 border border-primary-500/10">
                        {skill}
                      </span>
                    ))}
                  </div>
                </div>
              )}
            </div>
          </div>

          <!-- Author Content -->
          <div class="lg:w-2/3">
            <div class="prose prose-lg dark:prose-invert max-w-none">
              <div set:html={author.bio} />
            </div>

            {author.education && (
              <div class="mt-12">
                <h2 class="text-2xl font-bold text-gray-100">Education</h2>
                <div class="mt-6 space-y-6">
                  {author.education.map(edu => (
                    <div class="flex flex-col sm:flex-row sm:justify-between">
                      <div>
                        <h3 class="text-lg font-semibold text-gray-100">{edu.degree} in {edu.field}</h3>
                        <p class="text-gray-400">{edu.institution}</p>
                      </div>
                      <p class="text-gray-500">{edu.year}</p>
                    </div>
                  ))}
                </div>
              </div>
            )}

            {author.publications && (
              <div class="mt-12">
                <h2 class="text-2xl font-bold text-gray-100">Publications</h2>
                <div class="mt-6 space-y-6">
                  {author.publications.map(pub => (
                    <div>
                      <h3 class="text-lg font-semibold text-gray-100">
                        <a href={pub.url} class="hover:text-primary-400 transition-colors">
                          {pub.title}
                        </a>
                      </h3>
                      <p class="text-gray-400">{pub.publisher} • {pub.year}</p>
                    </div>
                  ))}
                </div>
              </div>
            )}

            <div class="mt-12">
              <h2 class="text-2xl font-bold text-gray-100">Recent Articles</h2>
              <div class="mt-6 space-y-8">
                {authorPosts.map(post => (
                  <div class="group">
                    <a href={`/news/${post.slug}`} class="block">
                      <h3 class="text-xl font-semibold text-gray-100 group-hover:text-primary-400 transition-colors">
                        {post.data.title}
                      </h3>
                      {post.data.description && (
                        <p class="mt-2 text-gray-400 line-clamp-2">
                          {post.data.description}
                        </p>
                      )}
                      <div class="mt-2 text-sm text-gray-500">
                        <time datetime={post.data.publish_date.toISOString()}>
                          {new Date(post.data.publish_date).toLocaleDateString('en-US', {
                            year: 'numeric',
                            month: 'long',
                            day: 'numeric'
                          })}
                        </time>
                        <span class="mx-2">•</span>
                        <span>{post.data.read_time}</span>
                      </div>
                    </a>
                  </div>
                ))}
              </div>
            </div>
          </div>
        </div>
      </article>
    </main>
    <Footer />
  </body>
</html>